在运行时将会有多个classloader被加载进来。通常情况下，类加载器分为逻辑上的树，子类加载器委托给父类加载器所有请求。只有当父类加载器不能满足要求时，子类加载器才会试图加载。
classloader是一个实现类加载器通用功能的抽象类。
1.加载类的实例时，先查询当前classloader是否加载过？有，就直接返回；没有，则查询父类是否加载过？有，则返回；没有，就执行当前classloader的findclass方法。这样做的结果是：如果类被父类ClassLoader，那么之后整个系统的生命周期中，永远不会再加载。所以想要实现自定义加载class，需要复写ClassLoader的loadclass()。
 protected Class<?> loadClass(String className, boolean resolve) throws ClassNotFoundException {
        Class<?> clazz = findLoadedClass(className);

        if (clazz == null) {
            ClassNotFoundException suppressed = null;
            try {
                clazz = parent.loadClass(className, false);
            } catch (ClassNotFoundException e) {
                suppressed = e;
            }

            if (clazz == null) {
                try {
                    clazz = findClass(className);
                } catch (ClassNotFoundException e) {
                    e.addSuppressed(suppressed);
                    throw e;
                }
            }
        }

        return clazz;
    }
2.ClassLoader的内部类BootClassLoader--系统唯一明确的根ClassLoader。显然BootClassLoader实现了ClassLoader的loadClass()。BootClassLoader将会通过Class类的native方法去加载框架需要的类。
    @Override
    protected Class<?> loadClass(String className, boolean resolve)
           throws ClassNotFoundException {
        Class<?> clazz = findLoadedClass(className);

        if (clazz == null) {
            clazz = findClass(className);
        }

        return clazz;
    }
3.静态内部类SystemClassLoader,创建一个PathClassLoader,并且指定父加载器为BootClassLoader。
    static private class SystemClassLoader {
        public static ClassLoader loader = ClassLoader.createSystemClassLoader();
    }
    private static ClassLoader createSystemClassLoader() {
        String classPath = System.getProperty("java.class.path", ".");

        // String[] paths = classPath.split(":");
        // URL[] urls = new URL[paths.length];
        // for (int i = 0; i < paths.length; i++) {
        // try {
        // urls[i] = new URL("file://" + paths[i]);
        // }
        // catch (Exception ex) {
        // ex.printStackTrace();
        // }
        // }
        //
        // return new java.net.URLClassLoader(urls, null);

        // TODO Make this a java.net.URLClassLoader once we have those?
        return new PathClassLoader(classPath, BootClassLoader.getInstance());
    }


Android提供了几个具体的实现：

BaseDexClassLoader.加载dex文件的父类，提供基础功能。没有重写ClassLoader订的loadclass()，说明依然遵循双亲委托机制。
1.返回给定package的信息。
   @Override
    protected synchronized Package getPackage(String name) {
        if (name != null && !name.isEmpty()) {
            Package pack = super.getPackage(name);
            if (pack == null) {
                pack = definePackage(name, "Unknown", "0.0", "Unknown", "Unknown", "0.0", "Unknown", null);
            }
            return pack;
        }
        return null;
    }
2.重写findClass(),通过pathList去查找类的方法。
  @Override
    protected Class<?> findClass(String name) throws ClassNotFoundException {
        List<Throwable> suppressedExceptions = new ArrayList<Throwable>();
        Class c = pathList.findClass(name, suppressedExceptions);
        if (c == null) {
            ClassNotFoundException cnfe = new ClassNotFoundException("Didn't find class \"" + name + "\" on path: " + pathList);
            for (Throwable t : suppressedExceptions) {
                cnfe.addSuppressed(t);
            }
            throw cnfe;
        }
        return c;
    }
3.遍历dex或resource的列表。通过DexFile的loadClassBinaryName()返回Class
    public Class findClass(String name, List<Throwable> suppressed) {
        for (Element element : dexElements) {
            DexFile1 dex = element.dexFile1;
            if (dex != null) {
                Class clazz = dex.loadClassBinaryName(name, definingContext, suppressed);
                if (clazz != null) {
                    return clazz;
                }
            }
        }
        if (dexElementsSuppressedExceptions != null) {
            suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));
        }
        return null;
    }
4.将Class的name与ClassLoader进行绑定，唯一确定一个类。
    public Class loadClassBinaryName(String name, ClassLoader loader, List<Throwable> suppressed) {
        return defineClass(name, loader, mCookie, suppressed);
    }

    private static Class defineClass(String name, ClassLoader loader, long cookie, List<Throwable> suppressed) {
        Class result = null;
        try {
            result = defineClassNative(name, loader, cookie);
        } catch (NoClassDefFoundError e) {
            if (suppressed != null) {
                suppressed.add(e);
            }
        } catch (ClassNotFoundException e) {
            if (suppressed != null) {
                suppressed.add(e);
            }
        }
        return result;
    }

PathClassLoader,继承BaseDexClassLoader.系统默认的加载安装应用中声明的类的ClassLoader。
1.加载包含类和资源的jar包或者apk文件
  public PathClassLoader(String dexPath, ClassLoader parent) {
        super(dexPath, null, null, parent);
    }
2.加载包含dex的JAR、ZIP、APK文件或者单独的dex文件。另外还有一个native的library文件。
    public PathClassLoader(String dexPath, String libraryPath, ClassLoader parent) {
        super(dexPath, null, libraryPath, parent);
    }
DexClassLoader,继承BaseDexClassLoader.加载不是应用中的代码。存放在应用私有文件目录下，读取jar、apk文件的列表，优化缓存到指定文件夹下。
    public DexClassLoader(String dexPath, String optimizedDirectory, String libraryPath, ClassLoader parent) {
        super(dexPath, new File(optimizedDirectory), libraryPath, parent);
    }



